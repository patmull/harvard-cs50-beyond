>>> from flights.models import Flight
>>> f = Flight.objects.filter(flight_number="387SF876D")
>>> p = Passenger(name="Maxwell Silverhammer", f)
  File "<console>", line 1
    p = Passenger(name="Maxwell Silverhammer", f)
                                                ^
SyntaxError: incomplete input
>>> p = Passenger(name="Maxwell Silverhammer", flights=f)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/base.py", line 564, in __init__
    _setattr(self, prop, value)
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/related_descriptors.py", line 626, in __set__
    raise TypeError(
TypeError: Direct assignment to the forward side of a many-to-many set is prohibited. Use flights.set() instead.
>>> passenger_flights = set()
>>> passenger_flights.add(f)
>>> passenger_flights
{<QuerySet [<Flight: Flight number: 387SF876D, duration: 825, origin: City: New York, street: Queens, # of runways: 12, destination: City: Prague, street: Ruzyne, # of runways: 4>]>}
>>> p = Passenger(name="Maxwell Silverhammer", flights=passenger_flights)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/base.py", line 564, in __init__
    _setattr(self, prop, value)
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/related_descriptors.py", line 626, in __set__
    raise TypeError(
TypeError: Direct assignment to the forward side of a many-to-many set is prohibited. Use flights.set() instead.
>>> p = Passenger(name="Maxwell Silverhammer")
>>> p.flights.add(f)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/related_descriptors.py", line 617, in __get__
    return self.related_manager_cls(instance)
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/related_descriptors.py", line 1022, in __init__
    raise ValueError(
ValueError: "<Passenger: Passenger object (None)>" needs to have a value for field "id" before this many-to-many relationship can be used.
>>> p.save()
>>> p.flights.add(f)
Traceback (most recent call last):
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/__init__.py", line 2053, in get_prep_value
    return int(value)
TypeError: int() argument must be a string, a bytes-like object or a real number, not 'QuerySet'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/related_descriptors.py", line 1137, in add
    self._add_items(
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/related_descriptors.py", line 1397, in _add_items
    target_ids = self._get_target_ids(target_field_name, objs)
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/related_descriptors.py", line 1331, in _get_target_ids
    target_ids.add(target_field.get_prep_value(obj))
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/related.py", line 1135, in get_prep_value
    return self.target_field.get_prep_value(value)
  File "/home/patri/.virtualenvs/FlightProject/lib/python3.10/site-packages/django/db/models/fields/__init__.py", line 2055, in get_prep_value
    raise e.__class__(
TypeError: Field 'id' expected a number but got <QuerySet [<Flight: Flight number: 387SF876D, duration: 825, origin: City: New York, street: Queens, # of runways: 12, destination: City: Prague, street: Ruzyne, # of runways: 4>]>.
>>> p.flights.add(f.id)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'id'
>>> f.id
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'id'
>>> f
<QuerySet [<Flight: Flight number: 387SF876D, duration: 825, origin: City: New York, street: Queens, # of runways: 12, destination: City: Prague, street: Ruzyne, # of runways: 4>]>
>>> f = Flight.objects.filter(flight_number="387SF876D").first()
>>> p.flights.add(f)
>>> p
>>> from flights.models import Flight
>>> f = Flight.objects.filter(flight_number="387SF876D").first()
>>> p.flights.add(f)
>>> passengers = Passenger.objects.all()
>>> passengers
<QuerySet [<Passenger: Maxwell Silverhammer>]>
>>> f
<Flight: Flight number: 387SF876D, origin: New York, JFK, destination: Prague, JFK>
>>> f.passengers
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Flight' object has no attribute 'passengers'
>>> f.passengers_flights
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x7f8943100880>
>>> f.passengers_flights.first()
<Passenger: Maxwell Silverhammer>
